{
  "version": 3,
  "sources": ["../src/node/index.ts", "../src/node/config/index.ts", "../src/node/config/prop.ts"],
  "sourcesContent": ["import config from './config'\r\n\r\nexport default { config }", "import fs from \"fs/promises\";\r\n\r\nimport OutputConfig, { Config } from \"./config\";\r\nimport { Prop } from \"./prop_type\";\r\nimport load_prop from \"./prop\";\r\n\r\nexport default {\r\n  builder,\r\n}\r\n\r\nconst root_prop = [\r\n  \"contentrating\",\r\n  \"description\",\r\n  \"visibility\",\r\n  \"workshopid\",\r\n  \"preview\",\r\n  \"builder\",\r\n  \"title\",\r\n  \"file\",\r\n  \"tags\",\r\n]\r\n\r\ntype Options = {\r\n  custom?: OutputConfig,\r\n  out_config?: string,\r\n  out_types?: string,\r\n}\r\n\r\n/**\r\n * @name \u5EFA\u7ACB\u914D\u7F6E\u6587\u4EF6\r\n * @param config \u914D\u7F6E\u6587\u4EF6 \r\n * @param path \u4FDD\u5B58\u4F4D\u7F6E\r\n * @returns \u8FD4\u56DE\u914D\u7F6E\u6587\u4EF6\r\n */\r\nasync function builder(config: Config, property: Prop[] = [], options?: Options) {\r\n  const $config: Config = {\r\n    tags: [],\r\n    title: \"NewProject\",\r\n    description: \"hello world\",\r\n    type: \"Web\",\r\n    audio: false,\r\n    file: \"index.html\",\r\n    visibility: \"public\",\r\n    contentrating: \"Everyone\",\r\n    ...config\r\n  };\r\n\r\n  const json = {\r\n    general: {\r\n      properties: {},\r\n      localization: {}\r\n    }\r\n  } as OutputConfig\r\n\r\n  console.groupCollapsed(\"\u521D\u59CB\u5316\u914D\u7F6E\u6A94\u6848\")\r\n  Object.keys($config).forEach(key => {\r\n    type KeyConfig = keyof Config\r\n    const value = $config[key as KeyConfig]\r\n    if (root_prop.indexOf(key) !== -1) json[key as KeyConfig] = value as any\r\n    if (key === \"audio\") json.general.supportsaudioprocessing = value as boolean\r\n    if (key === \"workshopid\") json.workshopurl = \"steam://url/CommunityFilePage/\" + value\r\n  })\r\n\r\n  const types = await load_prop(json.general as any, property)\r\n  const res = {\r\n    config: options?.custom ? mergeDeep(json, options?.custom) : json,\r\n    types,\r\n  }\r\n\r\n  console.log(\"\u6DFB\u52A0\u81EA\u8A02\u5C6C\u6027\")\r\n  if (options?.out_types) await fs.writeFile(options?.out_types, JSON.stringify(res.types))\r\n\r\n\r\n  console.log(\"\u7DE8\u8B6F\u6210\u529F\")\r\n  console.groupEnd()\r\n  if (options?.out_config) await fs.writeFile(options?.out_config, JSON.stringify(res.config))\r\n\r\n  return res\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction isObject(item:any):item is object {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nfunction mergeDeep<T>(target:T, ...sources:Partial<T>[]):T {\r\n  if (!sources.length) return target;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(target) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!target[key]) Object.assign(target, { [key]: {} });\r\n        mergeDeep(target[key], source[key] as any);\r\n      } else {\r\n        Object.assign(target, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(target, ...sources);\r\n}", "import { CustomType, Prop, PropType, TextLang } from \"./prop_type\";\r\nimport fs from \"fs/promises\";\r\n\r\ntype map_list = { [key: string]: string }\r\nconst state = {\r\n  index: -1,\r\n  used: {\r\n    ignore: {} as map_list,\r\n    mapping: {} as map_list,\r\n    directory: {\r\n      demand: {} as map_list,\r\n      fetch: {} as map_list,\r\n    }\r\n  },\r\n  langs: {} as { [lang: string]: { [ui_key: string]: string } },\r\n  translate: {\r\n    _: [] as string[],\r\n    length: 0,\r\n  },\r\n}\r\n\r\nexport default async function (\r\n  general: {\r\n    supportsaudioprocessing: boolean;\r\n    properties: {\r\n      [key: string]: any;\r\n    };\r\n    localization: {\r\n      [lang: string]: {\r\n        [ui_key: string]: string\r\n      }\r\n    };\r\n  },\r\n  props: Prop[],\r\n) {\r\n  const cache_file = (await read())\r\n  const cache = cache_file.props\r\n  console.groupCollapsed(\"\u8A2D\u5B9A\u5C6C\u6027\u4E2D\")\r\n  console.log(`\u7E7C\u627F ${cache.length} \u500B\u5C6C\u6027`)\r\n\r\n  const config = general.properties\r\n  state.langs = general.localization\r\n\r\n\r\n  for (const prop of props)\r\n    insert(config, prop, cache)\r\n\r\n  console.groupEnd()\r\n  console.log(`\u5275\u5EFA ${Object.keys(cache.index).length} \u500B\u5C6C\u6027`)\r\n\r\n  if (!Object.keys(general.localization).length) general.localization = undefined as any\r\n  await fs.writeFile(\"project.cache.json\", JSON.stringify(cache_file))\r\n\r\n  return state.used\r\n}\r\n\r\n\r\n\r\nfunction insert(\r\n    config: { [key: string]: any },\r\n    prop: Prop,\r\n    cache: {\r\n      length: number;\r\n      index: { [id: string]: string }\r\n    },\r\n    $condition: (string|((key:string)=>string))[] = []\r\n  ) {\r\n  const condition = $condition.concat(prop.condition || [])\r\n\r\n  const custom = [\"menu\",\"item\",\"tips\"]\r\n  const is_custom = (prop:Prop):prop is CustomType[keyof CustomType] => \"type\" in prop && custom.includes(prop.type)\r\n  if (is_custom(prop)) {\r\n    console.groupCollapsed(`|${prop.id.split(\"/\").at(-1)}|${prop.type}|`)\r\n    switch (prop.type)  {\r\n      case \"menu\": {\r\n        const options: { label: TextLang; value: string | number | boolean }[] = []\r\n\r\n\r\n\r\n        if (prop.all) options.push({ label: prop.all, value: -1 }) && console.debug(`|-\u5141\u8A31 ALL`)\r\n\r\n        let wait_list = []\r\n        for (const index in prop.options) {\r\n          const condition = $condition.concat(prop.condition || [])\r\n          const option = prop.options[index]\r\n          options.push({\r\n            label: option.label,\r\n            value: parseInt(index)\r\n          })\r\n\r\n          wait_list.push(() => {\r\n            const base_cond = `${id}.value===${index}`\r\n            const cond = (prop.all ? `(${id}.value===-1||${base_cond})` : base_cond)\r\n            condition.push(cond)\r\n            for (const $prop of option.value) {\r\n              $prop.id = `${prop.id}/${$prop.id}`\r\n              insert(config, $prop, cache, condition)\r\n            }\r\n          })\r\n        }\r\n\r\n        const id = insert(config, {\r\n          options,\r\n          condition,\r\n          id: prop.id,\r\n          type: \"combo\",\r\n          text: prop.text,\r\n          icon: prop.icon,\r\n          value: prop.value,\r\n          ignore: prop.ignore,\r\n          fixed_order: prop.fixed_order,\r\n        } as PropType[\"combo\"], cache)\r\n\r\n        wait_list.forEach(f => f())\r\n        break\r\n      }\r\n      case \"item\": {\r\n        const done = () => {\r\n          condition.push(`${id}.value`)\r\n          for (const $prop of prop.list) {\r\n            $prop.id = `${prop.id}/${$prop.id}`\r\n            insert(config, $prop, cache, condition)\r\n          }\r\n        }\r\n\r\n\r\n        const id = insert(config, {\r\n          condition,\r\n          id: prop.id,\r\n          type: \"bool\",\r\n          text: prop.text,\r\n          value: prop.value,\r\n          ignore: prop.ignore,\r\n          ...prop.custom,\r\n        } as Prop, cache)\r\n        \r\n        done()\r\n        break\r\n      }\r\n      case \"tips\": {\r\n        let list = prop.list\r\n        list = list.map(text=>{\r\n          if(typeof text === \"string\") text = {\"en-us\":text}\r\n          const res:TextLang = {}\r\n          for (const key in text) {\r\n            const title = typeof prop.text === \"string\" ? prop.text : (key in prop.text ? prop.text[key] : prop.text[\"en-us\"])\r\n            res[key] = `<h2>${title}</h2>` + text[key]\r\n          }\r\n          return translate(res)\r\n        })\r\n\r\n\r\n        if(list.length===1){\r\n          insert(config,{\r\n            ignore:true,\r\n            id: `${prop.id}`,\r\n            text: list[0],\r\n          },cache)\r\n          break\r\n        }\r\n\r\n        const keys:string[] = []\r\n        let frist = true\r\n        list.forEach((text, index) => {\r\n          keys.push(insert(config,{\r\n            ignore:true,\r\n            id: `${prop.id}/${index}`,\r\n            type: \"bool\",\r\n            value: frist,\r\n            fixed_order: !frist,\r\n\r\n            text: text,\r\n          },cache,[(key)=>`${key}.value${frist?\"===\":\"!==\"}{{}}.value`]) as string)\r\n          if(frist) frist = false\r\n        })\r\n        keys.forEach((key, index) =>\r\n          config[key].condition = config[key].condition.replace(\"{{}}\", keys.at(--index))\r\n        )\r\n        break\r\n      }\r\n    }\r\n\r\n    console.groupEnd()\r\n  } else {\r\n    //\u8A2D\u7F6E\u540D\u7A31\r\n    const id = prop.id\r\n    console.log(`|${id.split(\"/\").at(-1)}|${\"type\" in prop ? prop.type : \"text\"}|`)\r\n    const key: string = cache.index[id] || (cache.index[id] = string_index(cache.length++))\r\n\r\n    state.used[prop.ignore ? \"ignore\" : \"mapping\"][id] = key\r\n\r\n\r\n    //\u8F49\u7FA9\u503C\r\n    if (\"type\" in prop) {\r\n      switch (prop.type) {\r\n        case \"color\": {\r\n          prop.value = prop.value.split(\" \").map(v => parseInt(v) / 255).join(\" \")\r\n          break\r\n        }\r\n\r\n        case \"directory\": {\r\n          state.used.directory[prop.mode === \"fetchall\" ? \"fetch\" : \"demand\"][id] = key\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    //combo \u7FFB\u8B6F\r\n    (\"options\" in prop) && prop.options.map(v => {\r\n      v.label = translate(v.label)\r\n      return v\r\n    })\r\n\r\n    const order = prop.fixed_order ? state.index : ++state.index\r\n    const export_prop: any = prop\r\n    export_prop.id = undefined\r\n    export_prop.ignore = undefined\r\n    export_prop.fixed_order = undefined\r\n    const export_condition:string[] = condition.map(val => typeof val === \"string\" ? val : val(key))\r\n\r\n    export_prop.condition = condition.length === 0 ? undefined : export_condition.join(\"&&\")\r\n\r\n\r\n    if (prop.text) export_prop.text = translate(prop.text)\r\n\r\n    config[key] = {\r\n      ...export_prop,\r\n      order,\r\n    }\r\n\r\n    return key\r\n  }\r\n}\r\n\r\n//\u8655\u7406\u7FFB\u8B6F\r\nfunction translate(text: TextLang): string {\r\n  if (typeof text !== \"object\"){\r\n    if (text.indexOf(\"ui_\")===0) return text\r\n    text = { \"en-us\": text }\r\n  }\r\n\r\n  let ui_key = \"\"\r\n  const text_json = JSON.stringify(text)\r\n  const index = state.translate._.indexOf(text_json)\r\n\r\n  if (index !== -1) return \"ui_\" + string_index(index)\r\n  else {\r\n    state.translate._.push(text_json)\r\n    ui_key = (\"ui_\" + string_index(state.translate.length++))\r\n  }\r\n\r\n  for (const lang in text) {\r\n    if (!state.langs[lang]) state.langs[lang] = {} as { [key: string]: string }\r\n    state.langs[lang][ui_key] = text[lang].replace(/ /yg, \"&emsp;\")\r\n  }\r\n\r\n  return ui_key\r\n}\r\n\r\nfunction string_index(str: number): string\r\nfunction string_index(str: string): number\r\nfunction string_index(str: string | number): string | number {\r\n  const anum = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n  const anum_len = 52 // anum.length as 52\r\n\r\n  if (typeof str === \"string\") {\r\n    if (str.length == 1) return anum.indexOf(str);\r\n\r\n    let num = 0\r\n    let times = 0\r\n    const list = str.split('').reverse()\r\n    for (const i of list) num += anum.indexOf(i) * (anum_len ** times++)\r\n    return num\r\n  } else {\r\n    const list = []\r\n    if (str === 0) return anum[str]\r\n    while (str) {\r\n      const i: number = str % anum_len\r\n      list.unshift(anum[i])\r\n      str = (str - i) / anum_len\r\n    }\r\n    return list.join('')\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function read(): Promise<{ props: { length: number, index: { [id: string]: string } } }> {\r\n  const json: string | false = await fs.readFile(\"project.cache.json\", \"utf8\").catch(() => false)\r\n  const def = { props: { length: 0, index: {} } }\r\n  if (json === false) return def\r\n  try {\r\n    const obj = JSON.parse(json)\r\n    if (\"length\" in obj.props && \"index\" in obj.props) return obj\r\n    return { ...obj, ...def }\r\n  } catch (e) {\r\n    return def\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
